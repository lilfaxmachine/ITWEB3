#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require("../app");
var debug = require("debug")("api:server");
var http = require("http");
const express = require("express");
const { Server } = require("ws");
const { scoreSchema } = require("../models/schemas");
const mongoose = require("mongoose");
const Scores = mongoose.model("scores", scoreSchema);
var scoreController = require("../controllers/scoreController");

/**
 * Get port from environment and store in Express.
 */

const PORT = process.env.PORT || 4000;
const INDEX = "/index.html";

var port = normalizePort(process.env.PORT || "3000");
app.set("port", port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on("error", onError);
server.on("listening", onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
}

//HTTP Server
const wserver = express()
  .use((req, res) => res.sendFile(INDEX, { root: __dirname }))
  .listen(PORT, () => console.log(`Listening on ${PORT}`));

//Setting up WebSocket
const wsServer = new Server({ server: wserver });

console.log(`Websocket listening on ${PORT}`);

wsServer.on("connection", (wsClient) => {
  wsClient.send("this message was pushed by the WebSocket Server");
  wsClient.onmessage = (msg) =>
    console.log(`The server received: ${message["data"]}`);
  wsClient.onerror = (error) =>
    console.log(`The server received: ${error["code"]}`);
  wsClient.onclose = (why) =>
    console.log(`The server received: ${why.code} ${why.reason}`);
});

setInterval(() => {
  wsServer.clients.forEach((client) => {
    const scores = Scores.find({}, function (err, scores) {
      var scoreMap = [];

      scores.forEach(function (score) {
        var scoreModel = { score: score.score, username: score.username };
        scoreMap.push(scoreModel);
      });

      client.send(JSON.stringify(scoreMap));
    });
  });
}, 1000);
